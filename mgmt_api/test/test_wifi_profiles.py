# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.wifi_profiles import WifiProfiles  # noqa: E501
from openapi_client.rest import ApiException

class TestWifiProfiles(unittest.TestCase):
    """WifiProfiles unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test WifiProfiles
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WifiProfiles`
        """
        model = openapi_client.models.wifi_profiles.WifiProfiles()  # noqa: E501
        if include_optional :
            return WifiProfiles(
                profiles = [
                    openapi_client.models.profile.Profile(
                        auth_type = '', 
                        auto_wifi = True, 
                        bss_type = '', 
                        channel = 56, 
                        default_profile = True, 
                        eap = '', 
                        eap_ca_cert = openapi_client.models.file.File(
                            data = '', 
                            name = '', ), 
                        eap_client_cert = openapi_client.models.file.File(
                            data = '', 
                            name = '', ), 
                        eap_client_key = , 
                        eap_client_pwd = '', 
                        eap_identity = '', 
                        eap_intermediate_cert = , 
                        eap_pwd = '', 
                        hidden_ssid = True, 
                        name = '', 
                        psk = '', 
                        ssid = '', 
                        wsec = '', )
                    ], 
                settings = openapi_client.models.settings.Settings(
                    band = '', 
                    roaming = True, 
                    timeout = 56, )
            )
        else :
            return WifiProfiles(
        )
        """

    def testWifiProfiles(self):
        """Test WifiProfiles"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
