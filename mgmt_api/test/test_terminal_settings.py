# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.terminal_settings import TerminalSettings  # noqa: E501
from openapi_client.rest import ApiException

class TestTerminalSettings(unittest.TestCase):
    """TerminalSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TerminalSettings
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TerminalSettings`
        """
        model = openapi_client.models.terminal_settings.TerminalSettings()  # noqa: E501
        if include_optional :
            return TerminalSettings(
                cardholder_receipt = openapi_client.models.cardholder_receipt.CardholderReceipt(
                    header_for_authorized_receipt = '', ), 
                connectivity = openapi_client.models.connectivity.Connectivity(
                    simcard_status = 'ACTIVATED', ), 
                gratuities = [
                    openapi_client.models.gratuity.Gratuity(
                        allow_custom_amount = True, 
                        currency = '', 
                        predefined_tip_entries = [
                            ''
                            ], 
                        use_predefined_tip_entries = True, )
                    ], 
                hardware = openapi_client.models.hardware.Hardware(
                    display_maximum_back_light = 56, ), 
                nexo = openapi_client.models.nexo.Nexo(
                    event_urls = openapi_client.models.event_url.EventUrl(
                        event_local_urls = [
                            openapi_client.models.url.Url(
                                password = '', 
                                url = '', 
                                username = '', )
                            ], 
                        event_public_urls = [
                            openapi_client.models.url.Url(
                                password = '', 
                                url = '', 
                                username = '', )
                            ], ), 
                    nexo_event_urls = [
                        ''
                        ], ), 
                offline_processing = openapi_client.models.offline_processing.OfflineProcessing(
                    chip_floor_limit = 56, 
                    offline_swipe_limits = [
                        openapi_client.models.minor_units_monetary_value.MinorUnitsMonetaryValue(
                            amount = 56, 
                            currency_code = '', )
                        ], ), 
                opi = openapi_client.models.opi.Opi(
                    enable_pay_at_table = True, 
                    pay_at_table_store_number = '', 
                    pay_at_table_url = '', ), 
                receipt_options = openapi_client.models.receipt_options.ReceiptOptions(
                    logo = '', 
                    qr_code_data = '', ), 
                receipt_printing = openapi_client.models.receipt_printing.ReceiptPrinting(
                    merchant_approved = True, 
                    merchant_cancelled = True, 
                    merchant_capture_approved = True, 
                    merchant_capture_refused = True, 
                    merchant_refund_approved = True, 
                    merchant_refund_refused = True, 
                    merchant_refused = True, 
                    merchant_void = True, 
                    shopper_approved = True, 
                    shopper_cancelled = True, 
                    shopper_capture_approved = True, 
                    shopper_capture_refused = True, 
                    shopper_refund_approved = True, 
                    shopper_refund_refused = True, 
                    shopper_refused = True, 
                    shopper_void = True, ), 
                signature = openapi_client.models.signature.Signature(
                    ask_signature_on_screen = True, 
                    device_name = '', 
                    skip_signature = True, ), 
                surcharge = openapi_client.models.surcharge.Surcharge(
                    ask_confirmation = True, 
                    configurations = [
                        openapi_client.models.configuration.Configuration(
                            brand = '', 
                            currencies = [
                                openapi_client.models.currency.Currency(
                                    amount = 56, 
                                    currency_code = '', 
                                    percentage = null, )
                                ], 
                            sources = [
                                ''
                                ], )
                        ], ), 
                timeouts = openapi_client.models.timeouts.Timeouts(
                    from_active_to_sleep = 56, ), 
                wifi_profiles = openapi_client.models.wifi_profiles.WifiProfiles(
                    profiles = [
                        openapi_client.models.profile.Profile(
                            auth_type = '', 
                            auto_wifi = True, 
                            bss_type = '', 
                            channel = 56, 
                            default_profile = True, 
                            eap = '', 
                            eap_ca_cert = openapi_client.models.file.File(
                                data = '', 
                                name = '', ), 
                            eap_client_cert = openapi_client.models.file.File(
                                data = '', 
                                name = '', ), 
                            eap_client_key = , 
                            eap_client_pwd = '', 
                            eap_identity = '', 
                            eap_intermediate_cert = , 
                            eap_pwd = '', 
                            hidden_ssid = True, 
                            name = '', 
                            psk = '', 
                            ssid = '', 
                            wsec = '', )
                        ], 
                    settings = openapi_client.models.settings.Settings(
                        band = '', 
                        roaming = True, 
                        timeout = 56, ), )
            )
        else :
            return TerminalSettings(
        )
        """

    def testTerminalSettings(self):
        """Test TerminalSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
