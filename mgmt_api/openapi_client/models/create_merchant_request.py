# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class CreateMerchantRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    business_line_id: Optional[StrictStr] = Field(None, alias="businessLineId", description="The unique identifier of the [business line](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines). Required for an Adyen for Platforms Manage integration.")
    company_id: StrictStr = Field(..., alias="companyId", description="The unique identifier of the company account.")
    description: Optional[constr(strict=True, max_length=300)] = Field(None, description="Your description for the merchant account, maximum 300 characters.")
    legal_entity_id: Optional[StrictStr] = Field(None, alias="legalEntityId", description="The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities). Required for an Adyen for Platforms Manage integration.")
    pricing_plan: Optional[StrictStr] = Field(None, alias="pricingPlan", description="Sets the pricing plan for the merchant account. Required for an Adyen for Platforms Manage integration. Your Adyen contact will provide the values that you can use.")
    reference: Optional[StrictStr] = Field(None, description="Your reference for the merchant account. To make this reference the unique identifier of the merchant account, your Adyen contact can set up a template on your company account. The template can have 6 to 255 characters with upper- and lower-case letters, underscores, and numbers. When your company account has a template, then the `reference` is required and must be unique within the company account.")
    __properties = ["businessLineId", "companyId", "description", "legalEntityId", "pricingPlan", "reference"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateMerchantRequest:
        """Create an instance of CreateMerchantRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateMerchantRequest:
        """Create an instance of CreateMerchantRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateMerchantRequest.parse_obj(obj)

        _obj = CreateMerchantRequest.parse_obj({
            "business_line_id": obj.get("businessLineId"),
            "company_id": obj.get("companyId"),
            "description": obj.get("description"),
            "legal_entity_id": obj.get("legalEntityId"),
            "pricing_plan": obj.get("pricingPlan"),
            "reference": obj.get("reference")
        })
        return _obj

