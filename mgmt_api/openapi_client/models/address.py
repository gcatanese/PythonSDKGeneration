# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Address(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    city: Optional[StrictStr] = Field(None, description="The name of the city.")
    company_name: Optional[StrictStr] = Field(None, alias="companyName", description="The name of the company.")
    country: Optional[StrictStr] = Field(None, description="The two-letter country code, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.")
    postal_code: Optional[StrictStr] = Field(None, alias="postalCode", description="The postal code.")
    state_or_province: Optional[StrictStr] = Field(None, alias="stateOrProvince", description="The state or province as defined in [ISO 3166-2](https://www.iso.org/standard/72483.html). For example, **ON** for Ontario, Canada.   Applicable for the following countries: - Australia - Brazil - Canada - India - Mexico - New Zealand - United States")
    street_address: Optional[StrictStr] = Field(None, alias="streetAddress", description="The name of the street, and the house or building number.")
    street_address2: Optional[StrictStr] = Field(None, alias="streetAddress2", description="Additional address details, if any.")
    __properties = ["city", "companyName", "country", "postalCode", "stateOrProvince", "streetAddress", "streetAddress2"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Address:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Address:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Address.parse_obj(obj)

        _obj = Address.parse_obj({
            "city": obj.get("city"),
            "company_name": obj.get("companyName"),
            "country": obj.get("country"),
            "postal_code": obj.get("postalCode"),
            "state_or_province": obj.get("stateOrProvince"),
            "street_address": obj.get("streetAddress"),
            "street_address2": obj.get("streetAddress2")
        })
        return _obj

