# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.name2 import Name2

class UpdateMerchantUserRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    account_groups: Optional[List[StrictStr]] = Field(None, alias="accountGroups", description="The list of [account groups](https://docs.adyen.com/account/account-structure#account-groups) associated with this user.")
    active: Optional[StrictBool] = Field(None, description="Sets the status of the user to active (**true**) or inactive (**false**).")
    email: Optional[StrictStr] = Field(None, description="The email address of the user.")
    name: Optional[Name2] = None
    roles: Optional[List[StrictStr]] = Field(None, description="The list of [roles](https://docs.adyen.com/account/user-roles) for this user.")
    time_zone_code: Optional[StrictStr] = Field(None, alias="timeZoneCode", description="The [tz database name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the time zone of the user. For example, **Europe/Amsterdam**.")
    __properties = ["accountGroups", "active", "email", "name", "roles", "timeZoneCode"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateMerchantUserRequest:
        """Create an instance of UpdateMerchantUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateMerchantUserRequest:
        """Create an instance of UpdateMerchantUserRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateMerchantUserRequest.parse_obj(obj)

        _obj = UpdateMerchantUserRequest.parse_obj({
            "account_groups": obj.get("accountGroups"),
            "active": obj.get("active"),
            "email": obj.get("email"),
            "name": Name2.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "roles": obj.get("roles"),
            "time_zone_code": obj.get("timeZoneCode")
        })
        return _obj

