# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.company_links import CompanyLinks
from openapi_client.models.data_center import DataCenter

class Company(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    links: Optional[CompanyLinks] = Field(None, alias="_links")
    data_centers: Optional[List[DataCenter]] = Field(None, alias="dataCenters", description="List of available data centers.  Adyen has several data centers around the world.In the URL that you use for making API requests, we recommend you use the live URL prefix from the data center closest to your shoppers.")
    description: Optional[StrictStr] = Field(None, description="Your description for the company account, maximum 300 characters")
    id: Optional[StrictStr] = Field(None, description="The unique identifier of the company account.")
    name: Optional[StrictStr] = Field(None, description="The legal or trading name of the company.")
    reference: Optional[StrictStr] = Field(None, description="Your reference to the account")
    status: Optional[StrictStr] = Field(None, description="The status of the company account.  Possible values:  * **Active**: Users can log in. Processing and payout capabilities depend on the status of the merchant account. * **Inactive**: Users can log in. Payment processing and payouts are disabled. * **Closed**: The company account is closed and this cannot be reversed. Users cannot log in. Payment processing and payouts are disabled.")
    __properties = ["_links", "dataCenters", "description", "id", "name", "reference", "status"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Company:
        """Create an instance of Company from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_centers (list)
        _items = []
        if self.data_centers:
            for _item in self.data_centers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataCenters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Company:
        """Create an instance of Company from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Company.parse_obj(obj)

        _obj = Company.parse_obj({
            "links": CompanyLinks.from_dict(obj.get("_links")) if obj.get("_links") is not None else None,
            "data_centers": [DataCenter.from_dict(_item) for _item in obj.get("dataCenters")] if obj.get("dataCenters") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "reference": obj.get("reference"),
            "status": obj.get("status")
        })
        return _obj

