# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import json
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from openapi_client.models.install_android_app_details import InstallAndroidAppDetails
from openapi_client.models.install_android_certificate_details import InstallAndroidCertificateDetails
from openapi_client.models.release_update_details import ReleaseUpdateDetails
from openapi_client.models.uninstall_android_app_details import UninstallAndroidAppDetails
from openapi_client.models.uninstall_android_certificate_details import UninstallAndroidCertificateDetails
from typing import Any, List
from pydantic import StrictStr, Field

SCHEDULETERMINALACTIONSREQUESTACTIONDETAILS_ONE_OF_SCHEMAS = ["InstallAndroidAppDetails", "InstallAndroidCertificateDetails", "ReleaseUpdateDetails", "UninstallAndroidAppDetails", "UninstallAndroidCertificateDetails"]

class ScheduleTerminalActionsRequestActionDetails(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: InstallAndroidAppDetails
    __oneof_schema_1: Optional[InstallAndroidAppDetails] = None
    # data type: InstallAndroidCertificateDetails
    __oneof_schema_2: Optional[InstallAndroidCertificateDetails] = None
    # data type: ReleaseUpdateDetails
    __oneof_schema_3: Optional[ReleaseUpdateDetails] = None
    # data type: UninstallAndroidAppDetails
    __oneof_schema_4: Optional[UninstallAndroidAppDetails] = None
    # data type: UninstallAndroidCertificateDetails
    __oneof_schema_5: Optional[UninstallAndroidCertificateDetails] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(SCHEDULETERMINALACTIONSREQUESTACTIONDETAILS_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        error_messages = []
        match = 0
        # validate data type: InstallAndroidAppDetails
        if type(v) is not InstallAndroidAppDetails:
            error_messages.append(f"Error! Input type `{type(v)}` is not `InstallAndroidAppDetails`")
        else:
            match += 1

        # validate data type: InstallAndroidCertificateDetails
        if type(v) is not InstallAndroidCertificateDetails:
            error_messages.append(f"Error! Input type `{type(v)}` is not `InstallAndroidCertificateDetails`")
        else:
            match += 1

        # validate data type: ReleaseUpdateDetails
        if type(v) is not ReleaseUpdateDetails:
            error_messages.append(f"Error! Input type `{type(v)}` is not `ReleaseUpdateDetails`")
        else:
            match += 1

        # validate data type: UninstallAndroidAppDetails
        if type(v) is not UninstallAndroidAppDetails:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UninstallAndroidAppDetails`")
        else:
            match += 1

        # validate data type: UninstallAndroidCertificateDetails
        if type(v) is not UninstallAndroidCertificateDetails:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UninstallAndroidCertificateDetails`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ScheduleTerminalActionsRequestActionDetails with oneOf schemas: InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ScheduleTerminalActionsRequestActionDetails with oneOf schemas: InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ScheduleTerminalActionsRequestActionDetails:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ScheduleTerminalActionsRequestActionDetails:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        # deserialize data into InstallAndroidAppDetails
        try:
            instance.actual_instance = InstallAndroidAppDetails.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into InstallAndroidCertificateDetails
        try:
            instance.actual_instance = InstallAndroidCertificateDetails.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into ReleaseUpdateDetails
        try:
            instance.actual_instance = ReleaseUpdateDetails.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UninstallAndroidAppDetails
        try:
            instance.actual_instance = UninstallAndroidAppDetails.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UninstallAndroidCertificateDetails
        try:
            instance.actual_instance = UninstallAndroidCertificateDetails.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ScheduleTerminalActionsRequestActionDetails with oneOf schemas: InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ScheduleTerminalActionsRequestActionDetails with oneOf schemas: InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())





