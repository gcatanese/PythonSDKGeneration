# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt
from openapi_client.models.minor_units_monetary_value import MinorUnitsMonetaryValue

class OfflineProcessing(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    chip_floor_limit: Optional[StrictInt] = Field(None, alias="chipFloorLimit", description="The maximum offline transaction amount for chip cards, in the processing currency and specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).")
    offline_swipe_limits: Optional[List[MinorUnitsMonetaryValue]] = Field(None, alias="offlineSwipeLimits", description="The maximum offline transaction amount for swiped cards, in the specified currency.")
    __properties = ["chipFloorLimit", "offlineSwipeLimits"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OfflineProcessing:
        """Create an instance of OfflineProcessing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in offline_swipe_limits (list)
        _items = []
        if self.offline_swipe_limits:
            for _item in self.offline_swipe_limits:
                if _item:
                    _items.append(_item.to_dict())
            _dict['offlineSwipeLimits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OfflineProcessing:
        """Create an instance of OfflineProcessing from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OfflineProcessing.parse_obj(obj)

        _obj = OfflineProcessing.parse_obj({
            "chip_floor_limit": obj.get("chipFloorLimit"),
            "offline_swipe_limits": [MinorUnitsMonetaryValue.from_dict(_item) for _item in obj.get("offlineSwipeLimits")] if obj.get("offlineSwipeLimits") is not None else None
        })
        return _obj

