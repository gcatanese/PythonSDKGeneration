# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from openapi_client.models.allowed_origin import AllowedOrigin
from openapi_client.models.api_credential_links import ApiCredentialLinks

class MeApiCredential(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    links: Optional[ApiCredentialLinks] = Field(None, alias="_links")
    active: StrictBool = Field(..., description="Indicates if the API credential is enabled. Must be set to **true** to use the credential in your integration.")
    allowed_ip_addresses: List[StrictStr] = Field(..., alias="allowedIpAddresses", description="List of IP addresses from which your client can make requests.  If the list is empty, we allow requests from any IP. If the list is not empty and we get a request from an IP which is not on the list, you get a security error.")
    allowed_origins: Optional[List[AllowedOrigin]] = Field(None, alias="allowedOrigins", description="List containing the [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) linked to the API credential.")
    associated_merchant_accounts: Optional[List[StrictStr]] = Field(None, alias="associatedMerchantAccounts", description="List of merchant accounts that the API credential has explicit access to.   If the credential has access to a company, this implies access to all merchant accounts and no merchants for that company will be included.")
    client_key: StrictStr = Field(..., alias="clientKey", description="Public key used for [client-side authentication](https://docs.adyen.com/development-resources/client-side-authentication). The client key is required for Drop-in and Components integrations.")
    company_name: Optional[StrictStr] = Field(None, alias="companyName", description="Name of the company linked to the API credential.")
    description: Optional[constr(strict=True, max_length=50)] = Field(None, description="Description of the API credential.")
    id: StrictStr = Field(..., description="Unique identifier of the API credential.")
    roles: List[StrictStr] = Field(..., description="List of [roles](https://docs.adyen.com/development-resources/api-credentials#roles-1) for the API credential.")
    username: StrictStr = Field(..., description="The name of the [API credential](https://docs.adyen.com/development-resources/api-credentials), for example **ws@Company.TestCompany**.")
    __properties = ["_links", "active", "allowedIpAddresses", "allowedOrigins", "associatedMerchantAccounts", "clientKey", "companyName", "description", "id", "roles", "username"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeApiCredential:
        """Create an instance of MeApiCredential from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_origins (list)
        _items = []
        if self.allowed_origins:
            for _item in self.allowed_origins:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedOrigins'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeApiCredential:
        """Create an instance of MeApiCredential from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MeApiCredential.parse_obj(obj)

        _obj = MeApiCredential.parse_obj({
            "links": ApiCredentialLinks.from_dict(obj.get("_links")) if obj.get("_links") is not None else None,
            "active": obj.get("active"),
            "allowed_ip_addresses": obj.get("allowedIpAddresses"),
            "allowed_origins": [AllowedOrigin.from_dict(_item) for _item in obj.get("allowedOrigins")] if obj.get("allowedOrigins") is not None else None,
            "associated_merchant_accounts": obj.get("associatedMerchantAccounts"),
            "client_key": obj.get("clientKey"),
            "company_name": obj.get("companyName"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "roles": obj.get("roles"),
            "username": obj.get("username")
        })
        return _obj

