# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class ReceiptPrinting(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    merchant_approved: Optional[StrictBool] = Field(None, alias="merchantApproved", description="Print a merchant receipt when the payment is approved.")
    merchant_cancelled: Optional[StrictBool] = Field(None, alias="merchantCancelled", description="Print a merchant receipt when the transaction is cancelled.")
    merchant_capture_approved: Optional[StrictBool] = Field(None, alias="merchantCaptureApproved", description="Print a merchant receipt when capturing the payment is approved.")
    merchant_capture_refused: Optional[StrictBool] = Field(None, alias="merchantCaptureRefused", description="Print a merchant receipt when capturing the payment is refused.")
    merchant_refund_approved: Optional[StrictBool] = Field(None, alias="merchantRefundApproved", description="Print a merchant receipt when the refund is approved.")
    merchant_refund_refused: Optional[StrictBool] = Field(None, alias="merchantRefundRefused", description="Print a merchant receipt when the refund is refused.")
    merchant_refused: Optional[StrictBool] = Field(None, alias="merchantRefused", description="Print a merchant receipt when the payment is refused.")
    merchant_void: Optional[StrictBool] = Field(None, alias="merchantVoid", description="Print a merchant receipt when a previous transaction is voided.")
    shopper_approved: Optional[StrictBool] = Field(None, alias="shopperApproved", description="Print a shopper receipt when the payment is approved.")
    shopper_cancelled: Optional[StrictBool] = Field(None, alias="shopperCancelled", description="Print a shopper receipt when the transaction is cancelled.")
    shopper_capture_approved: Optional[StrictBool] = Field(None, alias="shopperCaptureApproved", description="Print a shopper receipt when capturing the payment is approved.")
    shopper_capture_refused: Optional[StrictBool] = Field(None, alias="shopperCaptureRefused", description="Print a shopper receipt when capturing the payment is refused.")
    shopper_refund_approved: Optional[StrictBool] = Field(None, alias="shopperRefundApproved", description="Print a shopper receipt when the refund is approved.")
    shopper_refund_refused: Optional[StrictBool] = Field(None, alias="shopperRefundRefused", description="Print a shopper receipt when the refund is refused.")
    shopper_refused: Optional[StrictBool] = Field(None, alias="shopperRefused", description="Print a shopper receipt when the payment is refused.")
    shopper_void: Optional[StrictBool] = Field(None, alias="shopperVoid", description="Print a shopper receipt when a previous transaction is voided.")
    __properties = ["merchantApproved", "merchantCancelled", "merchantCaptureApproved", "merchantCaptureRefused", "merchantRefundApproved", "merchantRefundRefused", "merchantRefused", "merchantVoid", "shopperApproved", "shopperCancelled", "shopperCaptureApproved", "shopperCaptureRefused", "shopperRefundApproved", "shopperRefundRefused", "shopperRefused", "shopperVoid"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReceiptPrinting:
        """Create an instance of ReceiptPrinting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReceiptPrinting:
        """Create an instance of ReceiptPrinting from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ReceiptPrinting.parse_obj(obj)

        _obj = ReceiptPrinting.parse_obj({
            "merchant_approved": obj.get("merchantApproved"),
            "merchant_cancelled": obj.get("merchantCancelled"),
            "merchant_capture_approved": obj.get("merchantCaptureApproved"),
            "merchant_capture_refused": obj.get("merchantCaptureRefused"),
            "merchant_refund_approved": obj.get("merchantRefundApproved"),
            "merchant_refund_refused": obj.get("merchantRefundRefused"),
            "merchant_refused": obj.get("merchantRefused"),
            "merchant_void": obj.get("merchantVoid"),
            "shopper_approved": obj.get("shopperApproved"),
            "shopper_cancelled": obj.get("shopperCancelled"),
            "shopper_capture_approved": obj.get("shopperCaptureApproved"),
            "shopper_capture_refused": obj.get("shopperCaptureRefused"),
            "shopper_refund_approved": obj.get("shopperRefundApproved"),
            "shopper_refund_refused": obj.get("shopperRefundRefused"),
            "shopper_refused": obj.get("shopperRefused"),
            "shopper_void": obj.get("shopperVoid")
        })
        return _obj

