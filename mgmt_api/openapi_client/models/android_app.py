# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class AndroidApp(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    description: Optional[StrictStr] = Field(None, description="The description that was provided when uploading the app. The description is not shown on the terminal.")
    id: StrictStr = Field(..., description="The unique identifier of the app.")
    label: Optional[StrictStr] = Field(None, description="The app name that is shown on the terminal.")
    package_name: Optional[StrictStr] = Field(None, alias="packageName", description="The package name of the app.")
    status: StrictStr = Field(..., description="The status of the app. Possible values:  * `processing`: The app is being signed and converted to a format that the terminal can handle. * `error`: Something went wrong. Check that the app matches the [requirements](https://docs.adyen.com/point-of-sale/android-terminals/app-requirements). * `invalid`: There is something wrong with the APK file of the app. * `ready`: The app has been signed and converted. * `archived`: The app is no longer available.")
    version_code: Optional[StrictInt] = Field(None, alias="versionCode", description="The internal version number of the app.")
    version_name: Optional[StrictStr] = Field(None, alias="versionName", description="The app version number that is shown on the terminal.")
    __properties = ["description", "id", "label", "packageName", "status", "versionCode", "versionName"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AndroidApp:
        """Create an instance of AndroidApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AndroidApp:
        """Create an instance of AndroidApp from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AndroidApp.parse_obj(obj)

        _obj = AndroidApp.parse_obj({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "package_name": obj.get("packageName"),
            "status": obj.get("status"),
            "version_code": obj.get("versionCode"),
            "version_name": obj.get("versionName")
        })
        return _obj

