# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class Terminal(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    assigned: Optional[StrictBool] = Field(None, description="The [assignment status](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api) of the terminal. If true, the terminal is assigned. If false, the terminal is in inventory and can't be boarded.")
    bluetooth_ip: Optional[StrictStr] = Field(None, alias="bluetoothIp", description="The Bluetooth IP address of the terminal.")
    bluetooth_mac: Optional[StrictStr] = Field(None, alias="bluetoothMac", description="The Bluetooth MAC address of the terminal.")
    city: Optional[StrictStr] = Field(None, description="The city where the terminal is located.")
    company_account: Optional[StrictStr] = Field(None, alias="companyAccount", description="The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.")
    country_code: Optional[StrictStr] = Field(None, alias="countryCode", description="The country code of the country where the terminal is located.")
    device_model: Optional[StrictStr] = Field(None, alias="deviceModel", description="The model name of the terminal.")
    ethernet_ip: Optional[StrictStr] = Field(None, alias="ethernetIp", description="The ethernet IP address of the terminal.")
    ethernet_mac: Optional[StrictStr] = Field(None, alias="ethernetMac", description="The ethernet MAC address of the terminal.")
    firmware_version: Optional[StrictStr] = Field(None, alias="firmwareVersion", description="The software release currently in use on the terminal.")
    iccid: Optional[StrictStr] = Field(None, description="The integrated circuit card identifier (ICCID) of the SIM card in the terminal.")
    id: Optional[StrictStr] = Field(None, description="The unique identifier of the terminal.")
    last_activity_date_time: Optional[datetime] = Field(None, alias="lastActivityDateTime", description="Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago.")
    last_transaction_date_time: Optional[datetime] = Field(None, alias="lastTransactionDateTime", description="Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago.")
    link_negotiation: Optional[StrictStr] = Field(None, alias="linkNegotiation", description="The Ethernet link negotiation that the terminal uses:  - `auto`: Auto-negotiation  - `100full`: 100 Mbps full duplex")
    serial_number: Optional[StrictStr] = Field(None, alias="serialNumber", description="The serial number of the terminal.")
    sim_status: Optional[StrictStr] = Field(None, alias="simStatus", description="On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal: ACTIVE or INVENTORY.")
    status: Optional[StrictStr] = Field(None, description="Indicates when the terminal was last online, whether the terminal is being reassigned, or whether the terminal is turned off. If the terminal was last online more that a week ago, it is also shown as turned off.")
    store_status: Optional[StrictStr] = Field(None, alias="storeStatus", description="The status of the store that the terminal is assigned to.")
    wifi_ip: Optional[StrictStr] = Field(None, alias="wifiIp", description="The terminal's IP address in your Wi-Fi network.")
    wifi_mac: Optional[StrictStr] = Field(None, alias="wifiMac", description="The terminal's MAC address in your Wi-Fi network.")
    wifi_ssid: Optional[StrictStr] = Field(None, alias="wifiSsid", description="The SSID of the Wi-Fi network that your terminal is connected to.")
    __properties = ["assigned", "bluetoothIp", "bluetoothMac", "city", "companyAccount", "countryCode", "deviceModel", "ethernetIp", "ethernetMac", "firmwareVersion", "iccid", "id", "lastActivityDateTime", "lastTransactionDateTime", "linkNegotiation", "serialNumber", "simStatus", "status", "storeStatus", "wifiIp", "wifiMac", "wifiSsid"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Terminal:
        """Create an instance of Terminal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Terminal:
        """Create an instance of Terminal from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Terminal.parse_obj(obj)

        _obj = Terminal.parse_obj({
            "assigned": obj.get("assigned"),
            "bluetooth_ip": obj.get("bluetoothIp"),
            "bluetooth_mac": obj.get("bluetoothMac"),
            "city": obj.get("city"),
            "company_account": obj.get("companyAccount"),
            "country_code": obj.get("countryCode"),
            "device_model": obj.get("deviceModel"),
            "ethernet_ip": obj.get("ethernetIp"),
            "ethernet_mac": obj.get("ethernetMac"),
            "firmware_version": obj.get("firmwareVersion"),
            "iccid": obj.get("iccid"),
            "id": obj.get("id"),
            "last_activity_date_time": obj.get("lastActivityDateTime"),
            "last_transaction_date_time": obj.get("lastTransactionDateTime"),
            "link_negotiation": obj.get("linkNegotiation"),
            "serial_number": obj.get("serialNumber"),
            "sim_status": obj.get("simStatus"),
            "status": obj.get("status"),
            "store_status": obj.get("storeStatus"),
            "wifi_ip": obj.get("wifiIp"),
            "wifi_mac": obj.get("wifiMac"),
            "wifi_ssid": obj.get("wifiSsid")
        })
        return _obj

