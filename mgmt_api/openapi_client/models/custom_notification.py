# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.amount2 import Amount2

class CustomNotification(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    amount: Optional[Amount2] = None
    event_code: Optional[StrictStr] = Field(None, alias="eventCode", description="The event that caused the notification to be sent.Currently supported values: * **AUTHORISATION** * **CANCELLATION** * **REFUND** * **CAPTURE** * **DEACTIVATE_RECURRING** * **REPORT_AVAILABLE** * **CHARGEBACK** * **REQUEST_FOR_INFORMATION** * **NOTIFICATION_OF_CHARGEBACK** * **NOTIFICATIONTEST** * **ORDER_OPENED** * **ORDER_CLOSED** * **CHARGEBACK_REVERSED** * **REFUNDED_REVERSED** * **REFUND_WITH_DATA**")
    event_date: Optional[datetime] = Field(None, alias="eventDate", description="The time of the event. Format: [ISO 8601](http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDThh:mm:ssTZD.")
    merchant_reference: Optional[StrictStr] = Field(None, alias="merchantReference", description="Your reference for the custom test notification.")
    payment_method: Optional[StrictStr] = Field(None, alias="paymentMethod", description="The payment method for the payment that the notification is about. Possible values: * **amex** * **visa** * **mc** * **maestro** * **bcmc** * **paypal**  * **sms**  * **bankTransfer_NL** * **bankTransfer_DE** * **bankTransfer_BE** * **ideal** * **elv** * **sepadirectdebit** ")
    reason: Optional[StrictStr] = Field(None, description="A descripton of what caused the notification.")
    success: Optional[StrictBool] = Field(None, description="The outcome of the event which the notification is about. Set to either **true** or **false**. ")
    __properties = ["amount", "eventCode", "eventDate", "merchantReference", "paymentMethod", "reason", "success"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomNotification:
        """Create an instance of CustomNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomNotification:
        """Create an instance of CustomNotification from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CustomNotification.parse_obj(obj)

        _obj = CustomNotification.parse_obj({
            "amount": Amount2.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "event_code": obj.get("eventCode"),
            "event_date": obj.get("eventDate"),
            "merchant_reference": obj.get("merchantReference"),
            "payment_method": obj.get("paymentMethod"),
            "reason": obj.get("reason"),
            "success": obj.get("success")
        })
        return _obj

