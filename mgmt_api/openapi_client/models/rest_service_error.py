# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.invalid_field import InvalidField
from openapi_client.models.json_object import JSONObject

class RestServiceError(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    detail: StrictStr = Field(..., description="A human-readable explanation specific to this occurrence of the problem.")
    error_code: StrictStr = Field(..., alias="errorCode", description="A code that identifies the problem type.")
    instance: Optional[StrictStr] = Field(None, description="A unique URI that identifies the specific occurrence of the problem.")
    invalid_fields: Optional[List[InvalidField]] = Field(None, alias="invalidFields", description="Detailed explanation of each validation error, when applicable.")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="A unique reference for the request, essentially the same as `pspReference`.")
    response: Optional[JSONObject] = None
    status: StrictInt = Field(..., description="The HTTP status code.")
    title: StrictStr = Field(..., description="A short, human-readable summary of the problem type.")
    type: StrictStr = Field(..., description="A URI that identifies the problem type, pointing to human-readable documentation on this problem type.")
    __properties = ["detail", "errorCode", "instance", "invalidFields", "requestId", "response", "status", "title", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RestServiceError:
        """Create an instance of RestServiceError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in invalid_fields (list)
        _items = []
        if self.invalid_fields:
            for _item in self.invalid_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invalidFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RestServiceError:
        """Create an instance of RestServiceError from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return RestServiceError.parse_obj(obj)

        _obj = RestServiceError.parse_obj({
            "detail": obj.get("detail"),
            "error_code": obj.get("errorCode"),
            "instance": obj.get("instance"),
            "invalid_fields": [InvalidField.from_dict(_item) for _item in obj.get("invalidFields")] if obj.get("invalidFields") is not None else None,
            "request_id": obj.get("requestId"),
            "response": JSONObject.from_dict(obj.get("response")) if obj.get("response") is not None else None,
            "status": obj.get("status"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj

