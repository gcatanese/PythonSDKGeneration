# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openapi_client.models.file import File

class Profile(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    auth_type: StrictStr = Field(..., alias="authType", description="The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**.")
    auto_wifi: Optional[StrictBool] = Field(None, alias="autoWifi", description="Indicates whether to automatically select the best authentication method available. Does not work on older terminal models.")
    bss_type: StrictStr = Field(..., alias="bssType", description="Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations.")
    channel: Optional[StrictInt] = Field(None, description="The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection.")
    default_profile: Optional[StrictBool] = Field(None, alias="defaultProfile", description="Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first.")
    eap: Optional[StrictStr] = Field(None, description="For `authType` **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**")
    eap_ca_cert: Optional[File] = Field(None, alias="eapCaCert")
    eap_client_cert: Optional[File] = Field(None, alias="eapClientCert")
    eap_client_key: Optional[File] = Field(None, alias="eapClientKey")
    eap_client_pwd: Optional[StrictStr] = Field(None, alias="eapClientPwd", description="For `eap` **tls**. The password of the RSA key file, if that file is password-protected.")
    eap_identity: Optional[StrictStr] = Field(None, alias="eapIdentity", description="For `authType` **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server.")
    eap_intermediate_cert: Optional[File] = Field(None, alias="eapIntermediateCert")
    eap_pwd: Optional[StrictStr] = Field(None, alias="eapPwd", description="For `eap` **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server.")
    hidden_ssid: Optional[StrictBool] = Field(None, alias="hiddenSsid", description="Indicates if the network doesn't broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network.")
    name: Optional[StrictStr] = Field(None, description="Your name for the Wi-Fi profile.")
    psk: Optional[StrictStr] = Field(None, description="For `authType` **wpa-psk or **wpa2-psk**. The password to the wireless network.")
    ssid: StrictStr = Field(..., description="The name of the wireless network.")
    wsec: StrictStr = Field(..., description="The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**")
    __properties = ["authType", "autoWifi", "bssType", "channel", "defaultProfile", "eap", "eapCaCert", "eapClientCert", "eapClientKey", "eapClientPwd", "eapIdentity", "eapIntermediateCert", "eapPwd", "hiddenSsid", "name", "psk", "ssid", "wsec"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Profile:
        """Create an instance of Profile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of eap_ca_cert
        if self.eap_ca_cert:
            _dict['eapCaCert'] = self.eap_ca_cert.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eap_client_cert
        if self.eap_client_cert:
            _dict['eapClientCert'] = self.eap_client_cert.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eap_client_key
        if self.eap_client_key:
            _dict['eapClientKey'] = self.eap_client_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eap_intermediate_cert
        if self.eap_intermediate_cert:
            _dict['eapIntermediateCert'] = self.eap_intermediate_cert.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Profile:
        """Create an instance of Profile from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Profile.parse_obj(obj)

        _obj = Profile.parse_obj({
            "auth_type": obj.get("authType"),
            "auto_wifi": obj.get("autoWifi"),
            "bss_type": obj.get("bssType"),
            "channel": obj.get("channel"),
            "default_profile": obj.get("defaultProfile"),
            "eap": obj.get("eap"),
            "eap_ca_cert": File.from_dict(obj.get("eapCaCert")) if obj.get("eapCaCert") is not None else None,
            "eap_client_cert": File.from_dict(obj.get("eapClientCert")) if obj.get("eapClientCert") is not None else None,
            "eap_client_key": File.from_dict(obj.get("eapClientKey")) if obj.get("eapClientKey") is not None else None,
            "eap_client_pwd": obj.get("eapClientPwd"),
            "eap_identity": obj.get("eapIdentity"),
            "eap_intermediate_cert": File.from_dict(obj.get("eapIntermediateCert")) if obj.get("eapIntermediateCert") is not None else None,
            "eap_pwd": obj.get("eapPwd"),
            "hidden_ssid": obj.get("hiddenSsid"),
            "name": obj.get("name"),
            "psk": obj.get("psk"),
            "ssid": obj.get("ssid"),
            "wsec": obj.get("wsec")
        })
        return _obj

