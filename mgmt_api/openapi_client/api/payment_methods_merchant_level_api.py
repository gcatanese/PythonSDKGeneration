# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Any, Optional

from openapi_client.models.apple_pay_info import ApplePayInfo
from openapi_client.models.payment_method import PaymentMethod
from openapi_client.models.payment_method_response import PaymentMethodResponse
from openapi_client.models.payment_method_setup_info import PaymentMethodSetupInfo
from openapi_client.models.update_payment_method_info import UpdatePaymentMethodInfo

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PaymentMethodsMerchantLevelApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_merchants_merchant_id_payment_method_settings(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], store_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of the store for which to return the payment methods.")] = None, business_line_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of the Business Line for which to return the payment methods.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of items to have on a page, maximum 100. The default is 10 items on a page.")] = None, page_number : Annotated[Optional[StrictInt], Field(description="The number of the page to fetch.")] = None, **kwargs) -> PaymentMethodResponse:  # noqa: E501
        """Get all payment methods  # noqa: E501

        Returns details for all payment methods of the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_payment_method_settings(merchant_id, store_id, business_line_id, page_size, page_number, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param store_id: The unique identifier of the store for which to return the payment methods.
        :type store_id: str
        :param business_line_id: The unique identifier of the Business Line for which to return the payment methods.
        :type business_line_id: str
        :param page_size: The number of items to have on a page, maximum 100. The default is 10 items on a page.
        :type page_size: int
        :param page_number: The number of the page to fetch.
        :type page_number: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaymentMethodResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_merchants_merchant_id_payment_method_settings_with_http_info(merchant_id, store_id, business_line_id, page_size, page_number, **kwargs)  # noqa: E501

    @validate_arguments
    def get_merchants_merchant_id_payment_method_settings_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], store_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of the store for which to return the payment methods.")] = None, business_line_id : Annotated[Optional[StrictStr], Field(description="The unique identifier of the Business Line for which to return the payment methods.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of items to have on a page, maximum 100. The default is 10 items on a page.")] = None, page_number : Annotated[Optional[StrictInt], Field(description="The number of the page to fetch.")] = None, **kwargs):  # noqa: E501
        """Get all payment methods  # noqa: E501

        Returns details for all payment methods of the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_payment_method_settings_with_http_info(merchant_id, store_id, business_line_id, page_size, page_number, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param store_id: The unique identifier of the store for which to return the payment methods.
        :type store_id: str
        :param business_line_id: The unique identifier of the Business Line for which to return the payment methods.
        :type business_line_id: str
        :param page_size: The number of items to have on a page, maximum 100. The default is 10 items on a page.
        :type page_size: int
        :param page_number: The number of the page to fetch.
        :type page_number: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaymentMethodResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'store_id',
            'business_line_id',
            'page_size',
            'page_number'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merchants_merchant_id_payment_method_settings" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']

        # process the query parameters
        _query_params = []
        if _params.get('store_id') is not None:  # noqa: E501
            _query_params.append(('storeId', _params['store_id']))
        if _params.get('business_line_id') is not None:  # noqa: E501
            _query_params.append(('businessLineId', _params['business_line_id']))
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))
        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('pageNumber', _params['page_number']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "PaymentMethodResponse",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/paymentMethodSettings', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_merchants_merchant_id_payment_method_settings_payment_method_id(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_id : Annotated[StrictStr, Field(..., description="The unique identifier of the payment method.")], **kwargs) -> PaymentMethod:  # noqa: E501
        """Get payment method details  # noqa: E501

        Returns details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_payment_method_settings_payment_method_id(merchant_id, payment_method_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_id: The unique identifier of the payment method. (required)
        :type payment_method_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaymentMethod
        """
        kwargs['_return_http_data_only'] = True
        return self.get_merchants_merchant_id_payment_method_settings_payment_method_id_with_http_info(merchant_id, payment_method_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_merchants_merchant_id_payment_method_settings_payment_method_id_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_id : Annotated[StrictStr, Field(..., description="The unique identifier of the payment method.")], **kwargs):  # noqa: E501
        """Get payment method details  # noqa: E501

        Returns details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_payment_method_settings_payment_method_id_with_http_info(merchant_id, payment_method_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_id: The unique identifier of the payment method. (required)
        :type payment_method_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaymentMethod, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'payment_method_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merchants_merchant_id_payment_method_settings_payment_method_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['payment_method_id']:
            _path_params['paymentMethodId'] = _params['payment_method_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "PaymentMethod",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_merchants_merchant_id_payment_method_settings_payment_method_id_get_apple_pay_domains(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_id : Annotated[StrictStr, Field(..., description="The unique identifier of the payment method.")], **kwargs) -> ApplePayInfo:  # noqa: E501
        """Get Apple Pay domains  # noqa: E501

        Returns all Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_payment_method_settings_payment_method_id_get_apple_pay_domains(merchant_id, payment_method_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_id: The unique identifier of the payment method. (required)
        :type payment_method_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApplePayInfo
        """
        kwargs['_return_http_data_only'] = True
        return self.get_merchants_merchant_id_payment_method_settings_payment_method_id_get_apple_pay_domains_with_http_info(merchant_id, payment_method_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_merchants_merchant_id_payment_method_settings_payment_method_id_get_apple_pay_domains_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_id : Annotated[StrictStr, Field(..., description="The unique identifier of the payment method.")], **kwargs):  # noqa: E501
        """Get Apple Pay domains  # noqa: E501

        Returns all Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_payment_method_settings_payment_method_id_get_apple_pay_domains_with_http_info(merchant_id, payment_method_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_id: The unique identifier of the payment method. (required)
        :type payment_method_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApplePayInfo, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'payment_method_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merchants_merchant_id_payment_method_settings_payment_method_id_get_apple_pay_domains" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['payment_method_id']:
            _path_params['paymentMethodId'] = _params['payment_method_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApplePayInfo",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/getApplePayDomains', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def patch_merchants_merchant_id_payment_method_settings_payment_method_id(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_id : Annotated[StrictStr, Field(..., description="The unique identifier of the payment method.")], update_payment_method_info : Optional[UpdatePaymentMethodInfo] = None, **kwargs) -> PaymentMethod:  # noqa: E501
        """Update a payment method  # noqa: E501

        Updates payment method details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_merchants_merchant_id_payment_method_settings_payment_method_id(merchant_id, payment_method_id, update_payment_method_info, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_id: The unique identifier of the payment method. (required)
        :type payment_method_id: str
        :param update_payment_method_info:
        :type update_payment_method_info: UpdatePaymentMethodInfo
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaymentMethod
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_merchants_merchant_id_payment_method_settings_payment_method_id_with_http_info(merchant_id, payment_method_id, update_payment_method_info, **kwargs)  # noqa: E501

    @validate_arguments
    def patch_merchants_merchant_id_payment_method_settings_payment_method_id_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_id : Annotated[StrictStr, Field(..., description="The unique identifier of the payment method.")], update_payment_method_info : Optional[UpdatePaymentMethodInfo] = None, **kwargs):  # noqa: E501
        """Update a payment method  # noqa: E501

        Updates payment method details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_merchants_merchant_id_payment_method_settings_payment_method_id_with_http_info(merchant_id, payment_method_id, update_payment_method_info, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_id: The unique identifier of the payment method. (required)
        :type payment_method_id: str
        :param update_payment_method_info:
        :type update_payment_method_info: UpdatePaymentMethodInfo
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaymentMethod, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'payment_method_id',
            'update_payment_method_info'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_merchants_merchant_id_payment_method_settings_payment_method_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['payment_method_id']:
            _path_params['paymentMethodId'] = _params['payment_method_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['update_payment_method_info']:
            _body_params = _params['update_payment_method_info']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "PaymentMethod",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_merchants_merchant_id_payment_method_settings(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_setup_info : Optional[PaymentMethodSetupInfo] = None, **kwargs) -> PaymentMethod:  # noqa: E501
        """Request a payment method  # noqa: E501

        Sends a request to add a new payment method to the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_payment_method_settings(merchant_id, payment_method_setup_info, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_setup_info:
        :type payment_method_setup_info: PaymentMethodSetupInfo
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaymentMethod
        """
        kwargs['_return_http_data_only'] = True
        return self.post_merchants_merchant_id_payment_method_settings_with_http_info(merchant_id, payment_method_setup_info, **kwargs)  # noqa: E501

    @validate_arguments
    def post_merchants_merchant_id_payment_method_settings_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_setup_info : Optional[PaymentMethodSetupInfo] = None, **kwargs):  # noqa: E501
        """Request a payment method  # noqa: E501

        Sends a request to add a new payment method to the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_payment_method_settings_with_http_info(merchant_id, payment_method_setup_info, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_setup_info:
        :type payment_method_setup_info: PaymentMethodSetupInfo
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaymentMethod, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'payment_method_setup_info'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_merchants_merchant_id_payment_method_settings" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['payment_method_setup_info']:
            _body_params = _params['payment_method_setup_info']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "PaymentMethod",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/paymentMethodSettings', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_merchants_merchant_id_payment_method_settings_payment_method_id_add_apple_pay_domains(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_id : Annotated[StrictStr, Field(..., description="The unique identifier of the payment method.")], apple_pay_info : Optional[ApplePayInfo] = None, **kwargs) -> object:  # noqa: E501
        """Add an Apple Pay domain  # noqa: E501

        Adds the new domain to the list of Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_payment_method_settings_payment_method_id_add_apple_pay_domains(merchant_id, payment_method_id, apple_pay_info, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_id: The unique identifier of the payment method. (required)
        :type payment_method_id: str
        :param apple_pay_info:
        :type apple_pay_info: ApplePayInfo
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.post_merchants_merchant_id_payment_method_settings_payment_method_id_add_apple_pay_domains_with_http_info(merchant_id, payment_method_id, apple_pay_info, **kwargs)  # noqa: E501

    @validate_arguments
    def post_merchants_merchant_id_payment_method_settings_payment_method_id_add_apple_pay_domains_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], payment_method_id : Annotated[StrictStr, Field(..., description="The unique identifier of the payment method.")], apple_pay_info : Optional[ApplePayInfo] = None, **kwargs):  # noqa: E501
        """Add an Apple Pay domain  # noqa: E501

        Adds the new domain to the list of Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_payment_method_settings_payment_method_id_add_apple_pay_domains_with_http_info(merchant_id, payment_method_id, apple_pay_info, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param payment_method_id: The unique identifier of the payment method. (required)
        :type payment_method_id: str
        :param apple_pay_info:
        :type apple_pay_info: ApplePayInfo
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'payment_method_id',
            'apple_pay_info'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_merchants_merchant_id_payment_method_settings_payment_method_id_add_apple_pay_domains" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['payment_method_id']:
            _path_params['paymentMethodId'] = _params['payment_method_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['apple_pay_info']:
            _body_params = _params['apple_pay_info']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '202': "object",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/addApplePayDomains', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
