# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from openapi_client.models.create_merchant_webhook_request import CreateMerchantWebhookRequest
from openapi_client.models.generate_hmac_key_response import GenerateHmacKeyResponse
from openapi_client.models.list_webhooks_response import ListWebhooksResponse
from openapi_client.models.test_webhook_request import TestWebhookRequest
from openapi_client.models.test_webhook_response import TestWebhookResponse
from openapi_client.models.update_merchant_webhook_request import UpdateMerchantWebhookRequest
from openapi_client.models.webhook import Webhook

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WebhooksMerchantLevelApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def delete_merchants_merchant_id_webhooks_webhook_id(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : Annotated[StrictStr, Field(..., description="Unique identifier of the webhook configuration.")], **kwargs) -> None:  # noqa: E501
        """Remove a webhook  # noqa: E501

        Remove the configuration for the webhook identified in the path.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_merchants_merchant_id_webhooks_webhook_id(merchant_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: Unique identifier of the webhook configuration. (required)
        :type webhook_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_merchants_merchant_id_webhooks_webhook_id_with_http_info(merchant_id, webhook_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_merchants_merchant_id_webhooks_webhook_id_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : Annotated[StrictStr, Field(..., description="Unique identifier of the webhook configuration.")], **kwargs):  # noqa: E501
        """Remove a webhook  # noqa: E501

        Remove the configuration for the webhook identified in the path.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_merchants_merchant_id_webhooks_webhook_id_with_http_info(merchant_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: Unique identifier of the webhook configuration. (required)
        :type webhook_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'webhook_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_merchants_merchant_id_webhooks_webhook_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['webhook_id']:
            _path_params['webhookId'] = _params['webhook_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/merchants/{merchantId}/webhooks/{webhookId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_merchants_merchant_id_webhooks(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], page_number : Annotated[Optional[StrictInt], Field(description="The number of the page to fetch.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of items to have on a page, maximum 100. The default is 10 items on a page.")] = None, **kwargs) -> ListWebhooksResponse:  # noqa: E501
        """List all webhooks  # noqa: E501

        Lists all webhook configurations for the merchant account.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_webhooks(merchant_id, page_number, page_size, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param page_number: The number of the page to fetch.
        :type page_number: int
        :param page_size: The number of items to have on a page, maximum 100. The default is 10 items on a page.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListWebhooksResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_merchants_merchant_id_webhooks_with_http_info(merchant_id, page_number, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def get_merchants_merchant_id_webhooks_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], page_number : Annotated[Optional[StrictInt], Field(description="The number of the page to fetch.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of items to have on a page, maximum 100. The default is 10 items on a page.")] = None, **kwargs):  # noqa: E501
        """List all webhooks  # noqa: E501

        Lists all webhook configurations for the merchant account.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_webhooks_with_http_info(merchant_id, page_number, page_size, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param page_number: The number of the page to fetch.
        :type page_number: int
        :param page_size: The number of items to have on a page, maximum 100. The default is 10 items on a page.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListWebhooksResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'page_number',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merchants_merchant_id_webhooks" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']

        # process the query parameters
        _query_params = []
        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('pageNumber', _params['page_number']))
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListWebhooksResponse",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/webhooks', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_merchants_merchant_id_webhooks_webhook_id(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : Annotated[StrictStr, Field(..., description="Unique identifier of the webhook configuration.")], **kwargs) -> Webhook:  # noqa: E501
        """Get a webhook  # noqa: E501

        Returns the configuration for the webhook identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_webhooks_webhook_id(merchant_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: Unique identifier of the webhook configuration. (required)
        :type webhook_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Webhook
        """
        kwargs['_return_http_data_only'] = True
        return self.get_merchants_merchant_id_webhooks_webhook_id_with_http_info(merchant_id, webhook_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_merchants_merchant_id_webhooks_webhook_id_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : Annotated[StrictStr, Field(..., description="Unique identifier of the webhook configuration.")], **kwargs):  # noqa: E501
        """Get a webhook  # noqa: E501

        Returns the configuration for the webhook identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_webhooks_webhook_id_with_http_info(merchant_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: Unique identifier of the webhook configuration. (required)
        :type webhook_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Webhook, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'webhook_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merchants_merchant_id_webhooks_webhook_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['webhook_id']:
            _path_params['webhookId'] = _params['webhook_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "Webhook",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/webhooks/{webhookId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def patch_merchants_merchant_id_webhooks_webhook_id(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : Annotated[StrictStr, Field(..., description="Unique identifier of the webhook configuration.")], update_merchant_webhook_request : Optional[UpdateMerchantWebhookRequest] = None, **kwargs) -> Webhook:  # noqa: E501
        """Update a webhook  # noqa: E501

        Make changes to the configuration of the webhook identified in the path. The request contains the new values you want to have in the webhook configuration. The response contains the full configuration for the webhook, which includes the new values from the request.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_merchants_merchant_id_webhooks_webhook_id(merchant_id, webhook_id, update_merchant_webhook_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: Unique identifier of the webhook configuration. (required)
        :type webhook_id: str
        :param update_merchant_webhook_request:
        :type update_merchant_webhook_request: UpdateMerchantWebhookRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Webhook
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_merchants_merchant_id_webhooks_webhook_id_with_http_info(merchant_id, webhook_id, update_merchant_webhook_request, **kwargs)  # noqa: E501

    @validate_arguments
    def patch_merchants_merchant_id_webhooks_webhook_id_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : Annotated[StrictStr, Field(..., description="Unique identifier of the webhook configuration.")], update_merchant_webhook_request : Optional[UpdateMerchantWebhookRequest] = None, **kwargs):  # noqa: E501
        """Update a webhook  # noqa: E501

        Make changes to the configuration of the webhook identified in the path. The request contains the new values you want to have in the webhook configuration. The response contains the full configuration for the webhook, which includes the new values from the request.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_merchants_merchant_id_webhooks_webhook_id_with_http_info(merchant_id, webhook_id, update_merchant_webhook_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: Unique identifier of the webhook configuration. (required)
        :type webhook_id: str
        :param update_merchant_webhook_request:
        :type update_merchant_webhook_request: UpdateMerchantWebhookRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Webhook, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'webhook_id',
            'update_merchant_webhook_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_merchants_merchant_id_webhooks_webhook_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['webhook_id']:
            _path_params['webhookId'] = _params['webhook_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['update_merchant_webhook_request']:
            _body_params = _params['update_merchant_webhook_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "Webhook",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/webhooks/{webhookId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_merchants_merchant_id_webhooks(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], create_merchant_webhook_request : Optional[CreateMerchantWebhookRequest] = None, **kwargs) -> Webhook:  # noqa: E501
        """Set up a webhook  # noqa: E501

        Subscribe to receive webhook notifications about events related to your merchant account. You can add basic authentication to make sure the data is secure.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_webhooks(merchant_id, create_merchant_webhook_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param create_merchant_webhook_request:
        :type create_merchant_webhook_request: CreateMerchantWebhookRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Webhook
        """
        kwargs['_return_http_data_only'] = True
        return self.post_merchants_merchant_id_webhooks_with_http_info(merchant_id, create_merchant_webhook_request, **kwargs)  # noqa: E501

    @validate_arguments
    def post_merchants_merchant_id_webhooks_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], create_merchant_webhook_request : Optional[CreateMerchantWebhookRequest] = None, **kwargs):  # noqa: E501
        """Set up a webhook  # noqa: E501

        Subscribe to receive webhook notifications about events related to your merchant account. You can add basic authentication to make sure the data is secure.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_webhooks_with_http_info(merchant_id, create_merchant_webhook_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param create_merchant_webhook_request:
        :type create_merchant_webhook_request: CreateMerchantWebhookRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Webhook, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'create_merchant_webhook_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_merchants_merchant_id_webhooks" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['create_merchant_webhook_request']:
            _body_params = _params['create_merchant_webhook_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "Webhook",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/webhooks', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_merchants_merchant_id_webhooks_webhook_id_generate_hmac(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : StrictStr, **kwargs) -> GenerateHmacKeyResponse:  # noqa: E501
        """Generate an HMAC key  # noqa: E501

        Returns an [HMAC key](https://en.wikipedia.org/wiki/HMAC) for the webhook identified in the path. This key allows you to check the integrity and the origin of the notifications you receive.By creating an HMAC key, you start receiving [HMAC-signed notifications](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures#enable-hmac-signatures) from Adyen. Find out more about how to [verify HMAC signatures](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures).  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_webhooks_webhook_id_generate_hmac(merchant_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: (required)
        :type webhook_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GenerateHmacKeyResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.post_merchants_merchant_id_webhooks_webhook_id_generate_hmac_with_http_info(merchant_id, webhook_id, **kwargs)  # noqa: E501

    @validate_arguments
    def post_merchants_merchant_id_webhooks_webhook_id_generate_hmac_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : StrictStr, **kwargs):  # noqa: E501
        """Generate an HMAC key  # noqa: E501

        Returns an [HMAC key](https://en.wikipedia.org/wiki/HMAC) for the webhook identified in the path. This key allows you to check the integrity and the origin of the notifications you receive.By creating an HMAC key, you start receiving [HMAC-signed notifications](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures#enable-hmac-signatures) from Adyen. Find out more about how to [verify HMAC signatures](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures).  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_webhooks_webhook_id_generate_hmac_with_http_info(merchant_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: (required)
        :type webhook_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GenerateHmacKeyResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'webhook_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_merchants_merchant_id_webhooks_webhook_id_generate_hmac" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['webhook_id']:
            _path_params['webhookId'] = _params['webhook_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "GenerateHmacKeyResponse",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/webhooks/{webhookId}/generateHmac', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_merchants_merchant_id_webhooks_webhook_id_test(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : Annotated[StrictStr, Field(..., description="Unique identifier of the webhook configuration.")], test_webhook_request : Optional[TestWebhookRequest] = None, **kwargs) -> TestWebhookResponse:  # noqa: E501
        """Test a webhook  # noqa: E501

        Sends sample notifications to test if the webhook is set up correctly.  We send four test notifications for each event code you choose. They cover success and failure scenarios for the hard-coded currencies EUR and GBP, regardless of the currencies configured in the merchant accounts. For custom notifications, we only send the specified custom notification.  The response describes the result of the test. The `status` field tells you if the test was successful or not. You can use the other fields to troubleshoot unsuccessful tests.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_webhooks_webhook_id_test(merchant_id, webhook_id, test_webhook_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: Unique identifier of the webhook configuration. (required)
        :type webhook_id: str
        :param test_webhook_request:
        :type test_webhook_request: TestWebhookRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TestWebhookResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.post_merchants_merchant_id_webhooks_webhook_id_test_with_http_info(merchant_id, webhook_id, test_webhook_request, **kwargs)  # noqa: E501

    @validate_arguments
    def post_merchants_merchant_id_webhooks_webhook_id_test_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], webhook_id : Annotated[StrictStr, Field(..., description="Unique identifier of the webhook configuration.")], test_webhook_request : Optional[TestWebhookRequest] = None, **kwargs):  # noqa: E501
        """Test a webhook  # noqa: E501

        Sends sample notifications to test if the webhook is set up correctly.  We send four test notifications for each event code you choose. They cover success and failure scenarios for the hard-coded currencies EUR and GBP, regardless of the currencies configured in the merchant accounts. For custom notifications, we only send the specified custom notification.  The response describes the result of the test. The `status` field tells you if the test was successful or not. You can use the other fields to troubleshoot unsuccessful tests.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_webhooks_webhook_id_test_with_http_info(merchant_id, webhook_id, test_webhook_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param webhook_id: Unique identifier of the webhook configuration. (required)
        :type webhook_id: str
        :param test_webhook_request:
        :type test_webhook_request: TestWebhookRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TestWebhookResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'webhook_id',
            'test_webhook_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_merchants_merchant_id_webhooks_webhook_id_test" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['webhook_id']:
            _path_params['webhookId'] = _params['webhook_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['test_webhook_request']:
            _body_params = _params['test_webhook_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "TestWebhookResponse",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/webhooks/{webhookId}/test', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
