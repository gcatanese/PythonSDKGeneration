# coding: utf-8

"""
    Management API

    Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```  # noqa: E501

    The version of the OpenAPI document: 1
    Contact: developer-experience@adyen.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from openapi_client.models.api_credential import ApiCredential
from openapi_client.models.create_api_credential_response import CreateApiCredentialResponse
from openapi_client.models.create_merchant_api_credential_request import CreateMerchantApiCredentialRequest
from openapi_client.models.list_merchant_api_credentials_response import ListMerchantApiCredentialsResponse
from openapi_client.models.update_merchant_api_credential_request import UpdateMerchantApiCredentialRequest

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class APICredentialsMerchantLevelApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_merchants_merchant_id_api_credentials(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], page_number : Annotated[Optional[StrictInt], Field(description="The number of the page to fetch.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of items to have on a page, maximum 100. The default is 10 items on a page.")] = None, **kwargs) -> ListMerchantApiCredentialsResponse:  # noqa: E501
        """Get a list of API credentials  # noqa: E501

        Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the merchant account. The list is grouped into pages as defined by the query parameters.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_api_credentials(merchant_id, page_number, page_size, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param page_number: The number of the page to fetch.
        :type page_number: int
        :param page_size: The number of items to have on a page, maximum 100. The default is 10 items on a page.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListMerchantApiCredentialsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_merchants_merchant_id_api_credentials_with_http_info(merchant_id, page_number, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def get_merchants_merchant_id_api_credentials_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], page_number : Annotated[Optional[StrictInt], Field(description="The number of the page to fetch.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of items to have on a page, maximum 100. The default is 10 items on a page.")] = None, **kwargs):  # noqa: E501
        """Get a list of API credentials  # noqa: E501

        Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the merchant account. The list is grouped into pages as defined by the query parameters.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_api_credentials_with_http_info(merchant_id, page_number, page_size, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param page_number: The number of the page to fetch.
        :type page_number: int
        :param page_size: The number of items to have on a page, maximum 100. The default is 10 items on a page.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListMerchantApiCredentialsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'page_number',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merchants_merchant_id_api_credentials" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']

        # process the query parameters
        _query_params = []
        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('pageNumber', _params['page_number']))
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListMerchantApiCredentialsResponse",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/apiCredentials', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_merchants_merchant_id_api_credentials_api_credential_id(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], api_credential_id : Annotated[StrictStr, Field(..., description="Unique identifier of the API credential.")], **kwargs) -> ApiCredential:  # noqa: E501
        """Get an API credential  # noqa: E501

        Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_api_credentials_api_credential_id(merchant_id, api_credential_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param api_credential_id: Unique identifier of the API credential. (required)
        :type api_credential_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiCredential
        """
        kwargs['_return_http_data_only'] = True
        return self.get_merchants_merchant_id_api_credentials_api_credential_id_with_http_info(merchant_id, api_credential_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_merchants_merchant_id_api_credentials_api_credential_id_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], api_credential_id : Annotated[StrictStr, Field(..., description="Unique identifier of the API credential.")], **kwargs):  # noqa: E501
        """Get an API credential  # noqa: E501

        Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_merchants_merchant_id_api_credentials_api_credential_id_with_http_info(merchant_id, api_credential_id, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param api_credential_id: Unique identifier of the API credential. (required)
        :type api_credential_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiCredential, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'api_credential_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merchants_merchant_id_api_credentials_api_credential_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['api_credential_id']:
            _path_params['apiCredentialId'] = _params['api_credential_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiCredential",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/apiCredentials/{apiCredentialId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def patch_merchants_merchant_id_api_credentials_api_credential_id(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], api_credential_id : Annotated[StrictStr, Field(..., description="Unique identifier of the API credential.")], update_merchant_api_credential_request : Optional[UpdateMerchantApiCredentialRequest] = None, **kwargs) -> ApiCredential:  # noqa: E501
        """Update an API credential  # noqa: E501

        Changes the API credential's roles, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request.   To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_merchants_merchant_id_api_credentials_api_credential_id(merchant_id, api_credential_id, update_merchant_api_credential_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param api_credential_id: Unique identifier of the API credential. (required)
        :type api_credential_id: str
        :param update_merchant_api_credential_request:
        :type update_merchant_api_credential_request: UpdateMerchantApiCredentialRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiCredential
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_merchants_merchant_id_api_credentials_api_credential_id_with_http_info(merchant_id, api_credential_id, update_merchant_api_credential_request, **kwargs)  # noqa: E501

    @validate_arguments
    def patch_merchants_merchant_id_api_credentials_api_credential_id_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], api_credential_id : Annotated[StrictStr, Field(..., description="Unique identifier of the API credential.")], update_merchant_api_credential_request : Optional[UpdateMerchantApiCredentialRequest] = None, **kwargs):  # noqa: E501
        """Update an API credential  # noqa: E501

        Changes the API credential's roles, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request.   To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_merchants_merchant_id_api_credentials_api_credential_id_with_http_info(merchant_id, api_credential_id, update_merchant_api_credential_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param api_credential_id: Unique identifier of the API credential. (required)
        :type api_credential_id: str
        :param update_merchant_api_credential_request:
        :type update_merchant_api_credential_request: UpdateMerchantApiCredentialRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiCredential, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'api_credential_id',
            'update_merchant_api_credential_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_merchants_merchant_id_api_credentials_api_credential_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']
        if _params['api_credential_id']:
            _path_params['apiCredentialId'] = _params['api_credential_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['update_merchant_api_credential_request']:
            _body_params = _params['update_merchant_api_credential_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiCredential",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/apiCredentials/{apiCredentialId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_merchants_merchant_id_api_credentials(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], create_merchant_api_credential_request : Optional[CreateMerchantApiCredentialRequest] = None, **kwargs) -> CreateApiCredentialResponse:  # noqa: E501
        """Create an API credential  # noqa: E501

        Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify the roles and allowed origins for the new API credential.  The response includes the: * [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication. * [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication. * [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.  > Make sure you store the API key securely in your system. You won't be able to retrieve it later.  If your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateApiKey).  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_api_credentials(merchant_id, create_merchant_api_credential_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param create_merchant_api_credential_request:
        :type create_merchant_api_credential_request: CreateMerchantApiCredentialRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateApiCredentialResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.post_merchants_merchant_id_api_credentials_with_http_info(merchant_id, create_merchant_api_credential_request, **kwargs)  # noqa: E501

    @validate_arguments
    def post_merchants_merchant_id_api_credentials_with_http_info(self, merchant_id : Annotated[StrictStr, Field(..., description="The unique identifier of the merchant account.")], create_merchant_api_credential_request : Optional[CreateMerchantApiCredentialRequest] = None, **kwargs):  # noqa: E501
        """Create an API credential  # noqa: E501

        Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify the roles and allowed origins for the new API credential.  The response includes the: * [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication. * [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication. * [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.  > Make sure you store the API key securely in your system. You won't be able to retrieve it later.  If your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateApiKey).  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_merchants_merchant_id_api_credentials_with_http_info(merchant_id, create_merchant_api_credential_request, async_req=True)
        >>> result = thread.get()

        :param merchant_id: The unique identifier of the merchant account. (required)
        :type merchant_id: str
        :param create_merchant_api_credential_request:
        :type create_merchant_api_credential_request: CreateMerchantApiCredentialRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateApiCredentialResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'merchant_id',
            'create_merchant_api_credential_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_merchants_merchant_id_api_credentials" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['merchant_id']:
            _path_params['merchantId'] = _params['merchant_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['create_merchant_api_credential_request']:
            _body_params = _params['create_merchant_api_credential_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateApiCredentialResponse",
            '204': None,
            '400': "RestServiceError",
            '401': "RestServiceError",
            '403': "RestServiceError",
            '422': "RestServiceError",
            '500': "RestServiceError",
        }

        return self.api_client.call_api(
            '/merchants/{merchantId}/apiCredentials', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
